<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>research on Security Research Group</title>
    <link>//uvasrg.github.io/categories/research/</link>
    <description>Recent content in research on Security Research Group</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Privacy and Security Research at the University of Virginia</copyright>
    <lastBuildDate>Fri, 10 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="//uvasrg.github.io/categories/research/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MICO Challenge in Membership Inference</title>
      <link>//uvasrg.github.io/mico-challenge-in-membership-inference/</link>
      <pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>//uvasrg.github.io/mico-challenge-in-membership-inference/</guid>
      <description>Anshuman Suri wrote up an interesting post on his experience with the MICO Challenge, a membership inference competition that was part of SaTML. Anshuman placed second in the competition (on the CIFAR data set), where the metric is highest true positive rate at a 0.1 false positive rate over a set of models (some trained using differential privacy and some without).
Anshuman&amp;rsquo;s post describes the methods he used and his experience in the competition: My submission to the MICO Challenge.</description>
    </item>
    
    <item>
      <title>Uh-oh, there&#39;s a new way to poison code models</title>
      <link>//uvasrg.github.io/uh-oh-theres-a-new-way-to-poison-code-models/</link>
      <pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>//uvasrg.github.io/uh-oh-theres-a-new-way-to-poison-code-models/</guid>
      <description>Jack Clark&amp;rsquo;s Import AI, 16 Jan 2023 includes a nice description of our work on TrojanPuzzle:
####################################################
Uh-oh, there&#39;s a new way to poison code models - and it&#39;s really hard to detect:
‚Ä¶TROJANPUZZLE is a clever way to trick your code model into betraying you - if you can poison the undelrying dataset‚Ä¶
Researchers with the University of California, Santa Barbara, Microsoft Corporation, and the University of Virginia have come up with some clever, subtle ways to poison the datasets used to train code models.</description>
    </item>
    
    <item>
      <title>Trojan Puzzle attack trains AI assistants into suggesting malicious code</title>
      <link>//uvasrg.github.io/trojan-puzzle-attack-trains-ai-assistants-into-suggesting-malicious-code/</link>
      <pubDate>Tue, 10 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>//uvasrg.github.io/trojan-puzzle-attack-trains-ai-assistants-into-suggesting-malicious-code/</guid>
      <description>Bleeping Computer has a story on our work (in collaboration with Microsoft Research) on poisoning code suggestion models:
Trojan Puzzle attack trains AI assistants into suggesting malicious code By Bill Toulas
    Researchers at the universities of California, Virginia, and Microsoft have devised a new poisoning attack that could trick AI-based coding assistants into suggesting dangerous code.
Named &amp;lsquo;Trojan Puzzle,&amp;rsquo; the attack stands out for bypassing static detection and signature-based dataset cleansing models, resulting in the AI models being trained to learn how to reproduce dangerous payloads.</description>
    </item>
    
    <item>
      <title>Dissecting Distribution Inference</title>
      <link>//uvasrg.github.io/dissecting-distribution-inference/</link>
      <pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>//uvasrg.github.io/dissecting-distribution-inference/</guid>
      <description>(Cross-post by Anshuman Suri)
Distribution inference attacks aims to infer statistical properties of data used to train machine learning models. These attacks are sometimes surprisingly potent, as we demonstrated in previous work.
KL Divergence Attack Most attacks against distribution inference involve training a meta-classifier, either using model parameters in white-box settings (Ganju et al., Property Inference Attacks on Fully Connected Neural Networks using Permutation Invariant Representations, CCS 2018), or using model predictions in black-box scenarios (Zhang et al.</description>
    </item>
    
    <item>
      <title>Attribute Inference attacks are really Imputation</title>
      <link>//uvasrg.github.io/attribute-inference-attacks-are-really-imputation/</link>
      <pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>//uvasrg.github.io/attribute-inference-attacks-are-really-imputation/</guid>
      <description>Post by Bargav Jayaraman
Attribute inference attacks have been shown by prior works to pose privacy threat against ML models. However, these works assume the knowledge of the training distribution and we show that in such cases these attacks do no better than a data imputataion attack that does not have access to the model. We explore the attribute inference risks in the cases where the adversary has limited or no prior knowledge of the training distribution and show that our white-box attribute inference attack (that uses neuron activations to infer the unknown sensitive attribute) surpasses imputation in these data constrained cases.</description>
    </item>
    
    <item>
      <title>Balancing Tradeoffs between Fickleness and Obstinacy in NLP Models</title>
      <link>//uvasrg.github.io/balancing-tradeoffs-between-fickleness-and-obstinacy-in-nlp-models/</link>
      <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>//uvasrg.github.io/balancing-tradeoffs-between-fickleness-and-obstinacy-in-nlp-models/</guid>
      <description>Post by Hannah Chen.
Our work on balanced adversarial training looks at how to train models that are robust to two different types of adversarial examples:
Hannah Chen, Yangfeng Ji, David Evans. Balanced Adversarial Training: Balancing Tradeoffs between Fickleness and Obstinacy in NLP Models. In The 2022 Conference on Empirical Methods in Natural Language Processing (EMNLP), Abu Dhabi, 7-11 December 2022. [ArXiv]
   Adversarial Examples At the broadest level, an adversarial example is an input crafted intentionally to confuse a model.</description>
    </item>
    
    <item>
      <title>Best Submission Award at VISxAI 2022</title>
      <link>//uvasrg.github.io/best-submission-award-at-visxai-2022/</link>
      <pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>//uvasrg.github.io/best-submission-award-at-visxai-2022/</guid>
      <description>Poisoning Attacks and Subpopulation Susceptibility by Evan Rose, Fnu Suya, and David Evans won the Best Submission Award at the 5th Workshop on Visualization for AI Explainability.
Undergraduate student Evan Rose led the work and presented it at VISxAI in Oklahoma City, 17 October 2022.
 Congratulations to #VISxAI&amp;#39;s Best Submission Awards:
üèÜ K-Means Clustering: An Explorable Explainer by @yizhe_ang https://t.co/BULW33WPzo
üèÜ Poisoning Attacks and Subpopulation Susceptibility by Evan Rose, @suyafnu, and @UdacityDave https://t.</description>
    </item>
    
    <item>
      <title>Visualizing Poisoning</title>
      <link>//uvasrg.github.io/visualizing-poisoning/</link>
      <pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>//uvasrg.github.io/visualizing-poisoning/</guid>
      <description>How does a poisoning attack work and why are some groups more susceptible to being victimized by a poisoning attack?
We&amp;rsquo;ve posted work that helps understand how poisoning attacks work with some engaging visualizations:
Poisoning Attacks and Subpopulation Susceptibility
An Experimental Exploration on the Effectiveness of Poisoning Attacks
Evan Rose, Fnu Suya, and David Evans
 
Follow the link to try the interactive version!   Machine learning is susceptible to poisoning attacks in which adversaries inject maliciously crafted training data into the training set to induce specific model behavior.</description>
    </item>
    
  </channel>
</rss>
